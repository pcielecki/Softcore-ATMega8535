
test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000090  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  000000e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000001b  00000000  00000000  00000104  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000076  00000000  00000000  0000011f  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000041  00000000  00000000  00000195  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   0000007b  00000000  00000000  000001d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000020  00000000  00000000  00000254  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    00000086  00000000  00000000  00000274  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	14 c0       	rjmp	.+40     	; 0x2a <__ctors_end>
   2:	1b c0       	rjmp	.+54     	; 0x3a <__bad_interrupt>
   4:	1a c0       	rjmp	.+52     	; 0x3a <__bad_interrupt>
   6:	19 c0       	rjmp	.+50     	; 0x3a <__bad_interrupt>
   8:	18 c0       	rjmp	.+48     	; 0x3a <__bad_interrupt>
   a:	17 c0       	rjmp	.+46     	; 0x3a <__bad_interrupt>
   c:	16 c0       	rjmp	.+44     	; 0x3a <__bad_interrupt>
   e:	15 c0       	rjmp	.+42     	; 0x3a <__bad_interrupt>
  10:	14 c0       	rjmp	.+40     	; 0x3a <__bad_interrupt>
  12:	13 c0       	rjmp	.+38     	; 0x3a <__bad_interrupt>
  14:	12 c0       	rjmp	.+36     	; 0x3a <__bad_interrupt>
  16:	11 c0       	rjmp	.+34     	; 0x3a <__bad_interrupt>
  18:	10 c0       	rjmp	.+32     	; 0x3a <__bad_interrupt>
  1a:	0f c0       	rjmp	.+30     	; 0x3a <__bad_interrupt>
  1c:	0e c0       	rjmp	.+28     	; 0x3a <__bad_interrupt>
  1e:	0d c0       	rjmp	.+26     	; 0x3a <__bad_interrupt>
  20:	0c c0       	rjmp	.+24     	; 0x3a <__bad_interrupt>
  22:	0b c0       	rjmp	.+22     	; 0x3a <__bad_interrupt>
  24:	0a c0       	rjmp	.+20     	; 0x3a <__bad_interrupt>
  26:	09 c0       	rjmp	.+18     	; 0x3a <__bad_interrupt>
  28:	08 c0       	rjmp	.+16     	; 0x3a <__bad_interrupt>

0000002a <__ctors_end>:
  2a:	11 24       	eor	r1, r1
  2c:	1f be       	out	0x3f, r1	; 63
  2e:	cf e5       	ldi	r28, 0x5F	; 95
  30:	d2 e0       	ldi	r29, 0x02	; 2
  32:	de bf       	out	0x3e, r29	; 62
  34:	cd bf       	out	0x3d, r28	; 61
  36:	02 d0       	rcall	.+4      	; 0x3c <main>
  38:	29 c0       	rjmp	.+82     	; 0x8c <_exit>

0000003a <__bad_interrupt>:
  3a:	e2 cf       	rjmp	.-60     	; 0x0 <__vectors>

0000003c <main>:
#include<avr/io.h>

int main(void){
  3c:	df 93       	push	r29
  3e:	cf 93       	push	r28
  40:	00 d0       	rcall	.+0      	; 0x42 <__SREG__+0x3>
  42:	00 d0       	rcall	.+0      	; 0x44 <__SREG__+0x5>
  44:	cd b7       	in	r28, 0x3d	; 61
  46:	de b7       	in	r29, 0x3e	; 62
	DDRA |= 0xFF;
  48:	ea e3       	ldi	r30, 0x3A	; 58
  4a:	f0 e0       	ldi	r31, 0x00	; 0
  4c:	80 81       	ld	r24, Z
  4e:	ea e3       	ldi	r30, 0x3A	; 58
  50:	f0 e0       	ldi	r31, 0x00	; 0
  52:	8f ef       	ldi	r24, 0xFF	; 255
  54:	80 83       	st	Z, r24
    PORTA |= 0x00;
  56:	ab e3       	ldi	r26, 0x3B	; 59
  58:	b0 e0       	ldi	r27, 0x00	; 0
  5a:	eb e3       	ldi	r30, 0x3B	; 59
  5c:	f0 e0       	ldi	r31, 0x00	; 0
  5e:	80 81       	ld	r24, Z
  60:	8c 93       	st	X, r24
	PORTA |= 0xAA;
  62:	ab e3       	ldi	r26, 0x3B	; 59
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	eb e3       	ldi	r30, 0x3B	; 59
  68:	f0 e0       	ldi	r31, 0x00	; 0
  6a:	80 81       	ld	r24, Z
  6c:	8a 6a       	ori	r24, 0xAA	; 170
  6e:	8c 93       	st	X, r24
	PORTA |= 0xFF;
  70:	eb e3       	ldi	r30, 0x3B	; 59
  72:	f0 e0       	ldi	r31, 0x00	; 0
  74:	80 81       	ld	r24, Z
  76:	eb e3       	ldi	r30, 0x3B	; 59
  78:	f0 e0       	ldi	r31, 0x00	; 0
  7a:	8f ef       	ldi	r24, 0xFF	; 255
  7c:	80 83       	st	Z, r24
	
		

}
  7e:	0f 90       	pop	r0
  80:	0f 90       	pop	r0
  82:	0f 90       	pop	r0
  84:	0f 90       	pop	r0
  86:	cf 91       	pop	r28
  88:	df 91       	pop	r29
  8a:	08 95       	ret

0000008c <_exit>:
  8c:	f8 94       	cli

0000008e <__stop_program>:
  8e:	ff cf       	rjmp	.-2      	; 0x8e <__stop_program>
